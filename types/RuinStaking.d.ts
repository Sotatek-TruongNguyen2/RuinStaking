/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RuinStakingInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "BONUS_MULTIPLIER()": FunctionFragment;
    "FEE_PENALTY_PERCENT()": FunctionFragment;
    "MINIMUM_DAYS_LOCK()": FunctionFragment;
    "addPool(address,uint256)": FunctionFragment;
    "allowEmergencyWithdraw()": FunctionFragment;
    "changeEmergencyWithdrawStatus(bool)": FunctionFragment;
    "changeInterestPerBlock(uint256)": FunctionFragment;
    "changePenaltyReceiver(address)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "dev()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getAdminRole()": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "getPoolById(uint256)": FunctionFragment;
    "grantRole(address,bytes32)": FunctionFragment;
    "harvest(uint256,address)": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "nftClaimed(uint256,address)": FunctionFragment;
    "penaltyReceiver()": FunctionFragment;
    "renounceRole(address,bytes32)": FunctionFragment;
    "revokeRole(address,bytes32)": FunctionFragment;
    "rewardEndBlock()": FunctionFragment;
    "ruinNFT()": FunctionFragment;
    "ruinPerBlock()": FunctionFragment;
    "ruinToken()": FunctionFragment;
    "set(uint256,uint256,bool)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "take(uint256)": FunctionFragment;
    "takeWithBlock(uint256)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "updateSinglePool(uint256)": FunctionFragment;
    "userInfos(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BONUS_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_PENALTY_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_DAYS_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowEmergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeEmergencyWithdrawStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeInterestPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePenaltyReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftClaimed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "penaltyReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ruinNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ruinPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ruinToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "take", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "takeWithBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSinglePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfos",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BONUS_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_PENALTY_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_DAYS_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeEmergencyWithdrawStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeInterestPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePenaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ruinNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ruinPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ruinToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takeWithBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSinglePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "GrantRole(address,bytes32)": EventFragment;
    "PoolAllocPointChanged(uint256,uint256)": EventFragment;
    "PoolCreated(address,uint256,uint256,uint256)": EventFragment;
    "PoolDeposited(uint256,uint256)": EventFragment;
    "PoolEmergencyWithdraw(uint256,uint256,address)": EventFragment;
    "PoolEmergencyWithdrawStatus(bool)": EventFragment;
    "PoolHarvested(uint256,uint256,address)": EventFragment;
    "PoolInterestChanged(uint256)": EventFragment;
    "PoolPenaltyReceiverChanged(address)": EventFragment;
    "PoolWithdraw(uint256,uint256)": EventFragment;
    "RenounceRole(address,bytes32)": EventFragment;
    "RevokeRole(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GrantRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAllocPointChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolEmergencyWithdraw"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PoolEmergencyWithdrawStatus"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolHarvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolInterestChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolPenaltyReceiverChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RenounceRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeRole"): EventFragment;
}

export class RuinStaking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RuinStakingInterface;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<[number]>;

    "BONUS_MULTIPLIER()"(overrides?: CallOverrides): Promise<[number]>;

    FEE_PENALTY_PERCENT(overrides?: CallOverrides): Promise<[number]>;

    "FEE_PENALTY_PERCENT()"(overrides?: CallOverrides): Promise<[number]>;

    MINIMUM_DAYS_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MINIMUM_DAYS_LOCK()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addPool(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPool(address,uint256)"(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowEmergencyWithdraw(overrides?: CallOverrides): Promise<[boolean]>;

    "allowEmergencyWithdraw()"(overrides?: CallOverrides): Promise<[boolean]>;

    changeEmergencyWithdrawStatus(
      _status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeEmergencyWithdrawStatus(bool)"(
      _status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeInterestPerBlock(
      _ruinPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeInterestPerBlock(uint256)"(
      _ruinPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changePenaltyReceiver(
      _penaltyReceiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changePenaltyReceiver(address)"(
      _penaltyReceiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256)"(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    "dev()"(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAdminRole(overrides?: CallOverrides): Promise<[string]>;

    "getAdminRole()"(overrides?: CallOverrides): Promise<[string]>;

    getMultiplier(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMultiplier(uint256,uint256)"(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolById(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber] & {
          lpToken: string;
          accRuinPerShare: BigNumber;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
        }
      ]
    >;

    "getPoolById(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber, BigNumber] & {
          lpToken: string;
          accRuinPerShare: BigNumber;
          allocPoint: BigNumber;
          lastRewardBlock: BigNumber;
        }
      ]
    >;

    grantRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    harvest(
      _poolId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvest(uint256,address)"(
      _poolId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      _address: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(address,bytes32)"(
      _address: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

    nftClaimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "nftClaimed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    penaltyReceiver(overrides?: CallOverrides): Promise<[string]>;

    "penaltyReceiver()"(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardEndBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ruinNFT(overrides?: CallOverrides): Promise<[string]>;

    "ruinNFT()"(overrides?: CallOverrides): Promise<[string]>;

    ruinPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ruinPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ruinToken(overrides?: CallOverrides): Promise<[string]>;

    "ruinToken()"(overrides?: CallOverrides): Promise<[string]>;

    set(
      _poolId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,bool)"(
      _poolId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    take(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "take(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    takeWithBlock(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "takeWithBlock(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateSinglePool(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateSinglePool(uint256)"(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfos(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardAmount: BigNumber;
        lastTimeDeposited: BigNumber;
      }
    >;

    "userInfos(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardAmount: BigNumber;
        lastTimeDeposited: BigNumber;
      }
    >;

    withdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

  "BONUS_MULTIPLIER()"(overrides?: CallOverrides): Promise<number>;

  FEE_PENALTY_PERCENT(overrides?: CallOverrides): Promise<number>;

  "FEE_PENALTY_PERCENT()"(overrides?: CallOverrides): Promise<number>;

  MINIMUM_DAYS_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  "MINIMUM_DAYS_LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

  addPool(
    _lpToken: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPool(address,uint256)"(
    _lpToken: string,
    _allocPoint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowEmergencyWithdraw(overrides?: CallOverrides): Promise<boolean>;

  "allowEmergencyWithdraw()"(overrides?: CallOverrides): Promise<boolean>;

  changeEmergencyWithdrawStatus(
    _status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeEmergencyWithdrawStatus(bool)"(
    _status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeInterestPerBlock(
    _ruinPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeInterestPerBlock(uint256)"(
    _ruinPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changePenaltyReceiver(
    _penaltyReceiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changePenaltyReceiver(address)"(
    _penaltyReceiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256)"(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dev(overrides?: CallOverrides): Promise<string>;

  "dev()"(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    _poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAdminRole(overrides?: CallOverrides): Promise<string>;

  "getAdminRole()"(overrides?: CallOverrides): Promise<string>;

  getMultiplier(
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256)"(
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolById(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      accRuinPerShare: BigNumber;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
    }
  >;

  "getPoolById(uint256)"(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      accRuinPerShare: BigNumber;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
    }
  >;

  grantRole(
    _account: string,
    _role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(address,bytes32)"(
    _account: string,
    _role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  harvest(
    _poolId: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvest(uint256,address)"(
    _poolId: BigNumberish,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    _address: string,
    _role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(address,bytes32)"(
    _address: string,
    _role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

  "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

  nftClaimed(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "nftClaimed(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  penaltyReceiver(overrides?: CallOverrides): Promise<string>;

  "penaltyReceiver()"(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    _account: string,
    _role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(address,bytes32)"(
    _account: string,
    _role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    _account: string,
    _role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(address,bytes32)"(
    _account: string,
    _role: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  ruinNFT(overrides?: CallOverrides): Promise<string>;

  "ruinNFT()"(overrides?: CallOverrides): Promise<string>;

  ruinPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "ruinPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  ruinToken(overrides?: CallOverrides): Promise<string>;

  "ruinToken()"(overrides?: CallOverrides): Promise<string>;

  set(
    _poolId: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,bool)"(
    _poolId: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  take(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "take(uint256)"(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  takeWithBlock(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "takeWithBlock(uint256)"(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateSinglePool(
    _poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateSinglePool(uint256)"(
    _poolId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfos(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardAmount: BigNumber;
      lastTimeDeposited: BigNumber;
    }
  >;

  "userInfos(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardAmount: BigNumber;
      lastTimeDeposited: BigNumber;
    }
  >;

  withdraw(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

    "BONUS_MULTIPLIER()"(overrides?: CallOverrides): Promise<number>;

    FEE_PENALTY_PERCENT(overrides?: CallOverrides): Promise<number>;

    "FEE_PENALTY_PERCENT()"(overrides?: CallOverrides): Promise<number>;

    MINIMUM_DAYS_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_DAYS_LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPool(address,uint256)"(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowEmergencyWithdraw(overrides?: CallOverrides): Promise<boolean>;

    "allowEmergencyWithdraw()"(overrides?: CallOverrides): Promise<boolean>;

    changeEmergencyWithdrawStatus(
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeEmergencyWithdrawStatus(bool)"(
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    changeInterestPerBlock(
      _ruinPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeInterestPerBlock(uint256)"(
      _ruinPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changePenaltyReceiver(
      _penaltyReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changePenaltyReceiver(address)"(
      _penaltyReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256)"(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dev(overrides?: CallOverrides): Promise<string>;

    "dev()"(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdminRole(overrides?: CallOverrides): Promise<string>;

    "getAdminRole()"(overrides?: CallOverrides): Promise<string>;

    getMultiplier(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolById(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        accRuinPerShare: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    "getPoolById(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        accRuinPerShare: BigNumber;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    grantRole(
      _account: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(
      _poolId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvest(uint256,address)"(
      _poolId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      _address: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(address,bytes32)"(
      _address: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    nftClaimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "nftClaimed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    penaltyReceiver(overrides?: CallOverrides): Promise<string>;

    "penaltyReceiver()"(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      _account: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      _account: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    ruinNFT(overrides?: CallOverrides): Promise<string>;

    "ruinNFT()"(overrides?: CallOverrides): Promise<string>;

    ruinPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "ruinPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    ruinToken(overrides?: CallOverrides): Promise<string>;

    "ruinToken()"(overrides?: CallOverrides): Promise<string>;

    set(
      _poolId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,bool)"(
      _poolId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    take(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "take(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takeWithBlock(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "takeWithBlock(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateSinglePool(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSinglePool(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfos(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardAmount: BigNumber;
        lastTimeDeposited: BigNumber;
      }
    >;

    "userInfos(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardAmount: BigNumber;
        lastTimeDeposited: BigNumber;
      }
    >;

    withdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    GrantRole(account: null, role: null): EventFilter;

    PoolAllocPointChanged(poolId: null, newAllocPoint: null): EventFilter;

    PoolCreated(
      lpToken: null,
      allocPoint: null,
      accRuinPerShare: null,
      lastRewardBlock: null
    ): EventFilter;

    PoolDeposited(poolId: null, amount: null): EventFilter;

    PoolEmergencyWithdraw(
      poolId: null,
      amount: null,
      receiver: null
    ): EventFilter;

    PoolEmergencyWithdrawStatus(status: null): EventFilter;

    PoolHarvested(poolId: null, amount: null, receiver: null): EventFilter;

    PoolInterestChanged(newInterest: null): EventFilter;

    PoolPenaltyReceiverChanged(newPenaltyReceiver: null): EventFilter;

    PoolWithdraw(poolId: null, amount: null): EventFilter;

    RenounceRole(account: null, role: null): EventFilter;

    RevokeRole(account: null, role: null): EventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    "BONUS_MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_PENALTY_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_PENALTY_PERCENT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_DAYS_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_DAYS_LOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPool(address,uint256)"(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowEmergencyWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    "allowEmergencyWithdraw()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeEmergencyWithdrawStatus(
      _status: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeEmergencyWithdrawStatus(bool)"(
      _status: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeInterestPerBlock(
      _ruinPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeInterestPerBlock(uint256)"(
      _ruinPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changePenaltyReceiver(
      _penaltyReceiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changePenaltyReceiver(address)"(
      _penaltyReceiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256)"(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    "dev()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAdminRole(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdminRole()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolById(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolById(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    harvest(
      _poolId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "harvest(uint256,address)"(
      _poolId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      _address: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(address,bytes32)"(
      _address: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides): Promise<BigNumber>;

    "massUpdatePools()"(overrides?: Overrides): Promise<BigNumber>;

    nftClaimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nftClaimed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penaltyReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "penaltyReceiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    ruinNFT(overrides?: CallOverrides): Promise<BigNumber>;

    "ruinNFT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ruinPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "ruinPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    ruinToken(overrides?: CallOverrides): Promise<BigNumber>;

    "ruinToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _poolId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,uint256,bool)"(
      _poolId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    take(_poolId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "take(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takeWithBlock(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "takeWithBlock(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateSinglePool(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateSinglePool(uint256)"(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfos(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfos(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ADMIN_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BONUS_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BONUS_MULTIPLIER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_PENALTY_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FEE_PENALTY_PERCENT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMUM_DAYS_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINIMUM_DAYS_LOCK()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPool(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPool(address,uint256)"(
      _lpToken: string,
      _allocPoint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowEmergencyWithdraw(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowEmergencyWithdraw()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeEmergencyWithdrawStatus(
      _status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeEmergencyWithdrawStatus(bool)"(
      _status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeInterestPerBlock(
      _ruinPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeInterestPerBlock(uint256)"(
      _ruinPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changePenaltyReceiver(
      _penaltyReceiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changePenaltyReceiver(address)"(
      _penaltyReceiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256)"(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dev()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAdminRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdminRole()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256)"(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolById(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolById(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _poolId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvest(uint256,address)"(
      _poolId: BigNumberish,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      _address: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(address,bytes32)"(
      _address: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    nftClaimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nftClaimed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    penaltyReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "penaltyReceiver()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(address,bytes32)"(
      _account: string,
      _role: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardEndBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruinNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ruinNFT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ruinPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ruinPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ruinToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ruinToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      _poolId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,bool)"(
      _poolId: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    take(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "take(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takeWithBlock(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "takeWithBlock(uint256)"(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSinglePool(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateSinglePool(uint256)"(
      _poolId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfos(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfos(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
